datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
enum UserRole {
  ADMIN
  USER
}
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole      @default(USER)
  bookings   Booking[]       @relation(fields: [], references: [])
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Car {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  imageUrl    String
  price       Float
  year        Int
  description String
  features    String[] 
  bookings   Booking[]       @relation(fields: [], references: [])
}
model Booking {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @db.ObjectId
  car      Car      @relation(fields: [carId], references: [id])
  carId    String   @db.ObjectId
  date     DateTime @default(now())
  createdAt          DateTime @default(now())
  startDate          String
  endDate            String
  pickupLocationId   String   @db.ObjectId
  dropoffLocationId  String   @db.ObjectId
  pickupLocation     Location @relation("PickupLocation", fields: [pickupLocationId], references: [id])
  dropoffLocation    Location @relation("DropoffLocation", fields: [dropoffLocationId], references: [id])
}
//location model
model Location {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String  
  address     String
  city        String
  country     String
  pickupBookings   Booking[] @relation("PickupLocation")
  dropoffBookings  Booking[] @relation("DropoffLocation")
}

 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([userId, credentialID])
}